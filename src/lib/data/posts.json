[
  {
    "slug": "syncp",
    "title": "SyncP - Synchronized Media Player",
    "date": "2021-09-10",
    "description": "A Python-based synchronized media player using mpv backend for playing local files across multiple hosts and clients",
    "tags": [
      "python",
      "mpv",
      "networking",
      "media-player",
      "synchronization"
    ],
    "published": true,
    "content": "<h1>syncP</h1>\n<h2>Brief</h2>\n<p>SyncP (sync player) is a couple of Python scripts that use an mpv backend to play local media files in sync between hosts and clients. A host and a client are needed because it&#39;s a serverless app. A host must port-forward so clients can connect and sync media playback. The mpv backend is the core of the project; I was lucky to get a lot of help from <a href=\"https://github.com/jaseg/python-mpv\">jaseg/python-mpv</a>.</p>\n<p>In an age of streaming and screen-sharing applications, this project seems un-innovative, and it doesn&#39;t do much more than sync playback and listen for events like toggles (play/pause). But living in a third-world country, I don&#39;t have access to high-bandwidth, low-latency, unlimited data. Because of this, I had to think of something that wasn&#39;t streaming. Screen sharing and streaming both consume a lot of data, and syncP solves that problem entirely by using encoded text messages for communication between hosts and clients.</p>\n<p>Initially, this project was limited to one client per host, but now it can have any number of clients. The project is available on <strong>pypi</strong> and can be installed with <code>pip install syncP</code>. After installation, <code>syncp --help</code> should be enough to get started. Before installing, you must set up mpv for the player to run; a guide is available in the repo at <a href=\"https://github.com/lawRathod/syncP\">lawRathod/syncP</a>.</p>\n<hr>\n<h2>Typical Use Case</h2>\n<p>Since it can play any kind of media extension (lovely mpv), you can enjoy watching movies or TV shows or even listening to music with your friends.</p>\n<hr>\n<h2>Behind the scenes</h2>\n<p>The three major components of the project are the following scripts:</p>\n<ul>\n<li>host.py</li>\n<li>client.py</li>\n<li>player.py</li>\n</ul>\n<h3>Host script</h3>\n<p>The host script must be started first by a host and will perform the following actions in order:</p>\n<ul>\n<li>Creates the object of the <code>player</code> class (inside <code>player.py</code>). The class constructor lets the user choose the media file to be played at the very beginning. The function returns a player object, which is later used to control the player.</li>\n<li>Opens a port on the system and binds to it to start listening for connections. The app spawns a thread with a method and the socket passed as a parameter. The port is not forwarded yet and must be done using ngrok or manually using the router.</li>\n<li>The player object returned at the very beginning is used in a method spawned in another thread. Playback is paused at the beginning, and one of the two threads is still waiting for the first connection.</li>\n<li>The moment the socket receives a connection, it&#39;s appended to a linked list. This list is shared with <code>player.py</code> and all the threads. Every new connection is then appended to the list.</li>\n<li>If any connection is dropped, it&#39;s removed from the list.</li>\n<li>Playback is paused every time a connection is added or removed.</li>\n</ul>\n<p>These things are done consistently and allow the host to receive connections anytime while the process is running. The data sent between the host and clients are encoded text messages like <code>&quot;toggle&quot;</code> on playback toggle and <code>&quot;sync: time&quot;</code>, which is a way to sync the time between all the clients and the host. I figured I&#39;d only allow hosts to sync time between connections. When a toggle message is received from a client, the host receives it, sends it to all other connections, and acts as a broadcaster.</p>\n<p>The host starts the socket with the <code>keep_alive</code> flag to help the connections sustain the life of the media playback and not drop randomly after some time. I found this out the hard way, but the fix was easy and quick to implement.</p>\n<h3>Client Script</h3>\n<p>The client side of the project does very little compared to the host because I felt it should be kept as light as possible, with the host handling most of the complexities. The following happens on the client side:</p>\n<ul>\n<li>It prompts for a host URL and port number on which the host is accepting connections. The last connection is stored in a file in the package repository.</li>\n<li>The user must select the media from the list of files in the current directory at this point.</li>\n<li>After the media is selected, the client tries to connect to the host by spawning a new thread and a separate thread for the player.</li>\n<li>If all goes well, the client receives the player&#39;s time from the host to seek on the client.</li>\n</ul>\n<p>That&#39;s all that happens. Once the connection is set, the app sends a keep-alive message to keep the connection alive, and now the host and client are in sync.</p>\n<h3>Player Script</h3>\n<p>This is the common module between the client and host that enables playback and sync operations. It primarily uses work from <a href=\"https://github.com/jaseg/python-mpv\">jaseg/python-mpv</a>. The player class keeps event listeners, and media file selection tidy and in a module. The constructor brings all the necessary objects to the class for future use. Some event listeners for toggles and keys are also part of this script.</p>\n<hr>\n<h2>New stuff I learned</h2>\n<p>This was my first shot at working with a couple of things. Mainly, web sockets and threads took a little time to get used to. I learned how to create a systematic design that could come to life and get things done in the desired way. This was a cute little project for me to hack together in a little time to help me watch stuff with my friends. It&#39;s always a little challenging to bake an interface and make design choices when you aren&#39;t the only one using the app. This app is CLI-based, and I didn&#39;t have to design something as complex as a platform, which saved me a lot of time. I took some things for granted, like the abstractions Python has to offer, and I hope to understand them more deeply.</p>\n<hr>\n<h2>Things that could&#39;ve been better</h2>\n<p>Here&#39;s a list of things where I think the app could have shined and provided a better experience. I&#39;m not sure if I&#39;m ever going to implement these because an application is never really &quot;finished.&quot;</p>\n<ul>\n<li><strong>Lack of a UI</strong>. A GUI could have solved this problem with nifty features like drag-and-drop instead of running the app in the directory where the file is located.</li>\n<li><strong>A single point of truth in a cloud DB</strong>. This would eliminate the need for port forwarding on the host side. Everyone would listen for toggle changes and seek times.</li>\n<li><strong>A chat window next to the player</strong>.</li>\n</ul>\n<p>I can think of many more, but it feels like a rabbit hole where you begin to imagine a completely different thing than what the app is right now.</p>\n<hr>\n<p>Thank you for making it this far. Have a great day! 😄</p>\n",
    "rawContent": "\n# syncP\n\n## Brief\n\nSyncP (sync player) is a couple of Python scripts that use an mpv backend to play local media files in sync between hosts and clients. A host and a client are needed because it's a serverless app. A host must port-forward so clients can connect and sync media playback. The mpv backend is the core of the project; I was lucky to get a lot of help from [jaseg/python-mpv](https://github.com/jaseg/python-mpv).\n\nIn an age of streaming and screen-sharing applications, this project seems un-innovative, and it doesn't do much more than sync playback and listen for events like toggles (play/pause). But living in a third-world country, I don't have access to high-bandwidth, low-latency, unlimited data. Because of this, I had to think of something that wasn't streaming. Screen sharing and streaming both consume a lot of data, and syncP solves that problem entirely by using encoded text messages for communication between hosts and clients.\n\nInitially, this project was limited to one client per host, but now it can have any number of clients. The project is available on **pypi** and can be installed with `pip install syncP`. After installation, `syncp --help` should be enough to get started. Before installing, you must set up mpv for the player to run; a guide is available in the repo at [lawRathod/syncP](https://github.com/lawRathod/syncP).\n\n---\n\n## Typical Use Case\n\nSince it can play any kind of media extension (lovely mpv), you can enjoy watching movies or TV shows or even listening to music with your friends.\n\n---\n\n## Behind the scenes\n\nThe three major components of the project are the following scripts:\n\n* host.py\n* client.py\n* player.py\n\n### Host script\n\nThe host script must be started first by a host and will perform the following actions in order:\n\n* Creates the object of the `player` class (inside `player.py`). The class constructor lets the user choose the media file to be played at the very beginning. The function returns a player object, which is later used to control the player.\n* Opens a port on the system and binds to it to start listening for connections. The app spawns a thread with a method and the socket passed as a parameter. The port is not forwarded yet and must be done using ngrok or manually using the router.\n* The player object returned at the very beginning is used in a method spawned in another thread. Playback is paused at the beginning, and one of the two threads is still waiting for the first connection.\n* The moment the socket receives a connection, it's appended to a linked list. This list is shared with `player.py` and all the threads. Every new connection is then appended to the list.\n* If any connection is dropped, it's removed from the list.\n* Playback is paused every time a connection is added or removed.\n\nThese things are done consistently and allow the host to receive connections anytime while the process is running. The data sent between the host and clients are encoded text messages like `\"toggle\"` on playback toggle and `\"sync: time\"`, which is a way to sync the time between all the clients and the host. I figured I'd only allow hosts to sync time between connections. When a toggle message is received from a client, the host receives it, sends it to all other connections, and acts as a broadcaster.\n\nThe host starts the socket with the `keep_alive` flag to help the connections sustain the life of the media playback and not drop randomly after some time. I found this out the hard way, but the fix was easy and quick to implement.\n\n### Client Script\n\nThe client side of the project does very little compared to the host because I felt it should be kept as light as possible, with the host handling most of the complexities. The following happens on the client side:\n\n* It prompts for a host URL and port number on which the host is accepting connections. The last connection is stored in a file in the package repository.\n* The user must select the media from the list of files in the current directory at this point.\n* After the media is selected, the client tries to connect to the host by spawning a new thread and a separate thread for the player.\n* If all goes well, the client receives the player's time from the host to seek on the client.\n\nThat's all that happens. Once the connection is set, the app sends a keep-alive message to keep the connection alive, and now the host and client are in sync.\n\n### Player Script\n\nThis is the common module between the client and host that enables playback and sync operations. It primarily uses work from [jaseg/python-mpv](https://github.com/jaseg/python-mpv). The player class keeps event listeners, and media file selection tidy and in a module. The constructor brings all the necessary objects to the class for future use. Some event listeners for toggles and keys are also part of this script.\n\n---\n\n## New stuff I learned\n\nThis was my first shot at working with a couple of things. Mainly, web sockets and threads took a little time to get used to. I learned how to create a systematic design that could come to life and get things done in the desired way. This was a cute little project for me to hack together in a little time to help me watch stuff with my friends. It's always a little challenging to bake an interface and make design choices when you aren't the only one using the app. This app is CLI-based, and I didn't have to design something as complex as a platform, which saved me a lot of time. I took some things for granted, like the abstractions Python has to offer, and I hope to understand them more deeply.\n\n---\n\n## Things that could've been better\n\nHere's a list of things where I think the app could have shined and provided a better experience. I'm not sure if I'm ever going to implement these because an application is never really \"finished.\"\n\n* **Lack of a UI**. A GUI could have solved this problem with nifty features like drag-and-drop instead of running the app in the directory where the file is located.\n* **A single point of truth in a cloud DB**. This would eliminate the need for port forwarding on the host side. Everyone would listen for toggle changes and seek times.\n* **A chat window next to the player**.\n\nI can think of many more, but it feels like a rabbit hole where you begin to imagine a completely different thing than what the app is right now.\n\n---\n\nThank you for making it this far. Have a great day! 😄"
  },
  {
    "slug": "pdwm",
    "title": "PDWM - Personal DWM Fork",
    "date": "2021-03-20",
    "description": "My customized dwm setup with patches for a more practical and visually pleasing Linux window manager",
    "tags": [
      "dwm",
      "linux",
      "window-manager",
      "suckless",
      "customization"
    ],
    "published": true,
    "content": "<h1>pdwm</h1>\n<p>A personal dwm fork with a more practical and visually pleasing setup. It&#39;s just a bunch of patches and a few personal changes to the source. My <a href=\"https://github.com/lawRathod/pdwm\">fork</a>.</p>\n<hr>\n<h2>Brief</h2>\n<p>Suckless&#39;s dwm is a dynamic window manager for Linux. It&#39;s one of the most popular window managers, but because of the suckless mentality, the default dwm is very minimal. It&#39;s reasonable and functional but lacks extra features. Luckily, the way patches work with dwm means you can transform it to look like other window managers. There are patches for the core and the bar. I&#39;ve been using dwm for almost six months and have updated my fork with patches and customized the config. This post describes my dwm setup.</p>\n<hr>\n<h2>What I&#39;ve Got</h2>\n<p>Here are the patches I&#39;ve applied, in the order I applied them. (You can find a &quot;how-to apply a patch&quot; section at the end of this post.)</p>\n<ul>\n<li><strong><a href=\"https://dwm.suckless.org/patches/systray/\">systray</a></strong> - Adds the system tray to the right corner of the status bar.</li>\n<li><strong><a href=\"https://dwm.suckless.org/patches/autostart/\">autostart</a></strong> - Lets you have a script called <code>~/.dwm/autostart.sh</code> that dwm runs every time it starts.</li>\n<li><strong><a href=\"https://dwm.suckless.org/patches/vanitygaps/\">vanitygaps</a></strong> - An eye-candy patch that adds gaps between windows in tile mode.</li>\n<li><strong><a href=\"https://dwm.suckless.org/patches/hide_vacant_tags/\">hide_vacant_tags</a></strong> - Hides vacant tags in the status bar.</li>\n<li><strong><a href=\"https://github.com/lawRathod/pdwm/commit/83e517141f3d063e3bad285ca388294ae9f2e052#diff-62eebf5eaf0e6a76a21dfed9da6556ee5413ddb49f06013bd83403cc1a485d98\">quickswitch</a></strong> - I made changes to the <code>dwm.c</code> file for this feature. This lets you switch between two windows next to each other with <strong>Alt+Tab</strong> (or whatever keybinding you set). This makes it more comfortable to transition from Windows to Linux and back. I&#39;ll try to create a patch from this to submit to suckless.</li>\n</ul>\n<p>These are the patches I&#39;ve applied. Some other useful patches are <strong><a href=\"https://dwm.suckless.org/patches/colorbar/\">colorbar</a></strong> and most of the patches related to the status bar. I highly suggest looking at the patches yourself to get the most out of dwm. Linux encourages customization, and dwm is highly customizable, so you can make it whatever you want.</p>\n<p>Here are some of my scripts for the statusbar and the autostart script:</p>\n<h3>autostart.sh</h3>\n<pre><code class=\"language-bash\"> #! /bin/bash\n dunst &amp;\n copyq &amp;\n xss-lock -v -l xsecurelock &amp;\n picom &amp;\n nm-applet &amp;\n feh --bg-scale /home/law/Downloads/wallpaper.jpg\n /home/law/apps/scripts/statusbar.sh &amp;\n</code></pre>\n<h3>statusbar.sh</h3>\n<pre><code class=\"language-bash\"> #!/bin/sh\n\n while :\n do\n /home/law/apps/scripts/statusbarnoloop.sh\n sleep 60\n done\n</code></pre>\n<h3>statusbarnoloop.sh</h3>\n<pre><code class=\"language-bash\"> #!/bin/sh\n\n time=$(date &quot;+ %a, %d  %H:%M&quot;)\n mute=$(pactl list sinks | awk &#39;/Mute:/{ print $2 }&#39; | head -n 1)\n bat=$(acpi -b | awk &#39;{ print $4}&#39; | sed &#39;s/%,//&#39;)\n batStat=$(acpi -b | awk &#39;{ print $3}&#39; | sed &#39;s/,//&#39;)\n\n if [ $bat -lt 15 ] &amp;&amp; [ $batStat = &#39;Discharging&#39; ]\n then\n notify-send &#39;Battery Low!&#39; &quot;Plug in the charger.&quot;\n\n elif ( [ $bat = 30 ] || [ $bat = 25 ] ) &amp;&amp; [ $batStat = &#39;Discharging&#39; ]\n then\n notify-send &#39;Battery Low!&#39; &quot;Plug in the charger.&quot;\n\n elif ( [ $bat = 90 ] || [ $bat = 85 ] ) &amp;&amp; [ $batStat = &#39;Charging&#39; ]\n then\n notify-send &#39;Charged!&#39; &quot;Remove the charger.&quot;\n\n elif [ $bat -gt 95 ] &amp;&amp; [ $batStat = &#39;Charging&#39; ]\n then\n notify-send &#39;Charged!&#39; &quot;Remove the charger.&quot;\n\n fi\n\n if [ $batStat = &#39;Charging&#39; ]\n then\n bat=$bat&quot; &quot;\n else\n bat=$bat&quot; &quot;\n fi\n\n volume=$(amixer -c 1 -M -D pulse get Master | grep -o -E [[:digit:]]+% | awk &quot;FNR &lt;= 1&quot;)\n\n if [[ $1 = &quot;--ref&quot; ]]\n then\n temp=$(curl &quot;api.openweathermap.org/data/2.5/weather?q=Jaisalmer&amp;appid={YOU_USE_YOURS}&amp;units=metric&quot; | jq .main.temp)\n if [[ $temp = &quot;&quot; ]]\n then\n temp=&quot; &quot;\n else\n temp=$(printf %0.f $temp)&quot;°C&quot;\n fi\n echo &quot;$temp&quot; &gt; /home/law/apps/scripts/temp\n fi\n\n temp=$(cat /home/law/apps/scripts/temp)\n\n if [[ $mute = &quot;yes&quot; ]]\n then\n xsetroot -name &quot;  $bat  $temp 婢 mute $time &quot;\n else\n xsetroot -name &quot;  $bat  $temp 墳 $volume $time &quot;\n fi\n</code></pre>\n<hr>\n<h2>How to Apply Patches</h2>\n<p>To apply a patch, use the following command in the project directory (in this case, dwm):</p>\n<pre><code class=\"language-bash\"> patch &lt; NAME_OF_THE_DIFF_FILE\n</code></pre>\n<h4>Did it fail for you?</h4>\n<p>Patching rarely succeeds on its own. A <strong>.diff</strong> file contains the location of the code that needs to change and what to replace it with. If you&#39;ve modified those lines of code before, the patch will fail. You&#39;ll then have to manually look at the diff file and change the code yourself.</p>\n<hr>\n<p>That&#39;s my dwm fork, available on my <a href=\"https://github.com/lawRathod/\">GitHub</a>. I&#39;ve tried all the major window managers, but dwm feels the simplest and most extensible. I&#39;m not a fan of the suckless mentality, but you should definitely give dwm a try; it&#39;s a great window manager.</p>\n<hr>\n<p>Thanks for reading! Have a great day.</p>\n",
    "rawContent": "\n# pdwm\n\nA personal dwm fork with a more practical and visually pleasing setup. It's just a bunch of patches and a few personal changes to the source. My [fork](https://github.com/lawRathod/pdwm).\n\n---\n\n## Brief\n\nSuckless's dwm is a dynamic window manager for Linux. It's one of the most popular window managers, but because of the suckless mentality, the default dwm is very minimal. It's reasonable and functional but lacks extra features. Luckily, the way patches work with dwm means you can transform it to look like other window managers. There are patches for the core and the bar. I've been using dwm for almost six months and have updated my fork with patches and customized the config. This post describes my dwm setup.\n\n---\n\n## What I've Got\n\nHere are the patches I've applied, in the order I applied them. (You can find a \"how-to apply a patch\" section at the end of this post.)\n\n- **[systray](https://dwm.suckless.org/patches/systray/)** - Adds the system tray to the right corner of the status bar.\n- **[autostart](https://dwm.suckless.org/patches/autostart/)** - Lets you have a script called `~/.dwm/autostart.sh` that dwm runs every time it starts.\n- **[vanitygaps](https://dwm.suckless.org/patches/vanitygaps/)** - An eye-candy patch that adds gaps between windows in tile mode.\n- **[hide_vacant_tags](https://dwm.suckless.org/patches/hide_vacant_tags/)** - Hides vacant tags in the status bar.\n- **[quickswitch](https://github.com/lawRathod/pdwm/commit/83e517141f3d063e3bad285ca388294ae9f2e052#diff-62eebf5eaf0e6a76a21dfed9da6556ee5413ddb49f06013bd83403cc1a485d98)** - I made changes to the `dwm.c` file for this feature. This lets you switch between two windows next to each other with **Alt+Tab** (or whatever keybinding you set). This makes it more comfortable to transition from Windows to Linux and back. I'll try to create a patch from this to submit to suckless.\n\nThese are the patches I've applied. Some other useful patches are **[colorbar](https://dwm.suckless.org/patches/colorbar/)** and most of the patches related to the status bar. I highly suggest looking at the patches yourself to get the most out of dwm. Linux encourages customization, and dwm is highly customizable, so you can make it whatever you want.\n\nHere are some of my scripts for the statusbar and the autostart script:\n\n### autostart.sh\n\n```bash\n #! /bin/bash\n dunst &\n copyq &\n xss-lock -v -l xsecurelock &\n picom &\n nm-applet &\n feh --bg-scale /home/law/Downloads/wallpaper.jpg\n /home/law/apps/scripts/statusbar.sh &\n```\n\n### statusbar.sh\n\n```bash\n #!/bin/sh\n\n while :\n do\n /home/law/apps/scripts/statusbarnoloop.sh\n sleep 60\n done\n```\n\n### statusbarnoloop.sh\n\n```bash\n #!/bin/sh\n\n time=$(date \"+ %a, %d  %H:%M\")\n mute=$(pactl list sinks | awk '/Mute:/{ print $2 }' | head -n 1)\n bat=$(acpi -b | awk '{ print $4}' | sed 's/%,//')\n batStat=$(acpi -b | awk '{ print $3}' | sed 's/,//')\n\n if [ $bat -lt 15 ] && [ $batStat = 'Discharging' ]\n then\n notify-send 'Battery Low!' \"Plug in the charger.\"\n\n elif ( [ $bat = 30 ] || [ $bat = 25 ] ) && [ $batStat = 'Discharging' ]\n then\n notify-send 'Battery Low!' \"Plug in the charger.\"\n\n elif ( [ $bat = 90 ] || [ $bat = 85 ] ) && [ $batStat = 'Charging' ]\n then\n notify-send 'Charged!' \"Remove the charger.\"\n\n elif [ $bat -gt 95 ] && [ $batStat = 'Charging' ]\n then\n notify-send 'Charged!' \"Remove the charger.\"\n\n fi\n\n if [ $batStat = 'Charging' ]\n then\n bat=$bat\" \"\n else\n bat=$bat\" \"\n fi\n\n volume=$(amixer -c 1 -M -D pulse get Master | grep -o -E [[:digit:]]+% | awk \"FNR <= 1\")\n\n if [[ $1 = \"--ref\" ]]\n then\n temp=$(curl \"api.openweathermap.org/data/2.5/weather?q=Jaisalmer&appid={YOU_USE_YOURS}&units=metric\" | jq .main.temp)\n if [[ $temp = \"\" ]]\n then\n temp=\" \"\n else\n temp=$(printf %0.f $temp)\"°C\"\n fi\n echo \"$temp\" > /home/law/apps/scripts/temp\n fi\n\n temp=$(cat /home/law/apps/scripts/temp)\n\n if [[ $mute = \"yes\" ]]\n then\n xsetroot -name \"  $bat  $temp 婢 mute $time \"\n else\n xsetroot -name \"  $bat  $temp 墳 $volume $time \"\n fi\n```\n\n---\n\n## How to Apply Patches\n\nTo apply a patch, use the following command in the project directory (in this case, dwm):\n\n```bash\n patch < NAME_OF_THE_DIFF_FILE\n```\n\n#### Did it fail for you?\n\nPatching rarely succeeds on its own. A **.diff** file contains the location of the code that needs to change and what to replace it with. If you've modified those lines of code before, the patch will fail. You'll then have to manually look at the diff file and change the code yourself.\n\n---\n\nThat's my dwm fork, available on my [GitHub](https://github.com/lawRathod/). I've tried all the major window managers, but dwm feels the simplest and most extensible. I'm not a fan of the suckless mentality, but you should definitely give dwm a try; it's a great window manager.\n\n---\n\nThanks for reading\\! Have a great day.\n"
  },
  {
    "slug": "dndr",
    "title": "DNDR - Flutter Reader App",
    "date": "2020-07-15",
    "description": "Building my first Flutter mobile application - a reader app with profiles and custom settings",
    "tags": [
      "flutter",
      "dart",
      "mobile-dev",
      "cross-platform"
    ],
    "published": true,
    "content": "<h1>dndr</h1>\n<p>📦</p>\n<hr>\n<blockquote>\n<h3>Content</h3>\n<ul>\n<li>WHY!</li>\n<li>HOW!</li>\n<li>WHAT NOW!</li>\n</ul>\n</blockquote>\n<h2>WHY!</h2>\n<p>Imagine two guys just talking about some tech/framework (very easy to imagine I&#39;m sure) which is fascinating to them and just like anybody else gets too excited to a point where one of them describes an idea for a mini-project on the spot. The descriptions go along the lines of something he himself would want to use and haven&#39;t found anything just like that. He proposes that there should be a reader application that should have profiles or some preset settings (like notifications, color tone, brightness. etc.) which are enabled whenever he is in the app, the other guy follows... As they use more words they now have a concept which is what this project is about and the framework in the discussion is a noob-friendly, cross-platform mobile framework we have all heard of, <strong><a href=\"https://flutter.dev\">flutter</a></strong>. Flutter has become very popular and we wanted to try it out. The idea of writing code once and running it on multiple platforms is still very exciting to us and we wanted to give it a try. The guys forget about it the very next day but that&#39;s not the point for now. This was <strong>why</strong> this project was built. So let&#39;s quickly move on to <strong>how</strong> I built it using flutter and all of what I learned from this very first try at building a mobile application.</p>\n<hr>\n<h2>HOW!</h2>\n<p>Finally, the lockdown begins and I decide to come through with this project and write lines of <a href=\"https://dart.dev/\">dart</a> code. To be honest I was more excited about making this project with vim because I had only become more familiar with this editor. I had to <strong>vim flex</strong>, I am not sorry about it.</p>\n<h4>Setup</h4>\n<ul>\n<li>Linux (latest kernel)</li>\n<li>flutter (dev channel)</li>\n<li>neovim with coc-flutter</li>\n<li>Android Studio emulator</li>\n<li>Github and Sourceforge</li>\n</ul>\n<p>I ran into numerous problems when Linux kernel v5.6 was released. Flutter hot-reload won&#39;t work or even <strong>flutter run</strong> won&#39;t work for some while. It was fixed soon but didn&#39;t reach the stable channel for long enough time therefore, had to make a switch to the dev channel in flutter.</p>\n<p>The best thing about flutter is the availability of packages. The first package I had to use was a pdf viewer which I didn&#39;t want to write from scratch, then had to use a package for scrollbar and ended up using more packages than I would like. There&#39;s a package for even the tiniest of things with flutter.</p>\n<h4>Packages used:</h4>\n<ul>\n<li>permission_handler: ^5.0.0+hotfix.6</li>\n<li>flutter_full_pdf_viewer: ^1.0.6</li>\n<li>path: ^1.7.0</li>\n<li>draggable_scrollbar: ^0.0.4</li>\n<li>flutter_launcher_icons: ^0.7.3</li>\n<li>path_provider: ^1.6.11</li>\n</ul>\n<p>The package&#39;s names are self-explanatory and it&#39;s a very simple app so nothing complex is happening in that department.</p>\n<h4>Beginner’s Bad Luck:</h4>\n<p>I would have loved a way to modularize/structure the code better and that&#39;s how I started in the beginning, turned out it became complex quickly, and then I ended up doing most of the things in a single file (since it’s a tiny app, <strong>very tiny</strong>) and minimum modules. The problem was some package classes were easier to instantiate and use without having a separate file for each. It makes the most sense because the packages in themselves are modules and need not be broken down any further.</p>\n<p>One big note, flutter comes with dart so please keep it in mind before installing dart yourself separately, it will only waste disk space.</p>\n<p>I spent a little longer on the syntax and testing little things which cost more time in the beginning and weren&#39;t necessary. Also didn&#39;t plan on how to keep persistent data in the beginning and moved ahead to just make things work and hack around to find the best practices.</p>\n<p>I should have spent more time thinking about how I am going to implement persistent data storage on the device. I used basic file i/o operations to achieve that since I had to write a list. List isn’t that complex of a data structure but I would have liked it if I could have done it in a more efficient way. I tried finding a better way but failed. I have this feeling that there is a better way to do what I wanted to do and I ain&#39;t giving up looking for one anytime soon.</p>\n<h4>Things which are beautiful about flutter/dart:</h4>\n<p>I have read how people say dart is such a failed attempt at a coding language but I found it very easy to get started with. The syntax is very familiar to java or c++ and the standard library is rich which makes the development process much faster as well as more efficient. Flutter builds on top of dart and benefits from all of that. Even the memory management is top class with dart.</p>\n<p>Async calls on dart worked for me without any hiccups and basically everything during the project had a positive impact on what I feel about mobile app development with flutter. There are a plethora of inbuilt classes for mostly all the purposes I needed.</p>\n<p>How everything is so well integrated makes me appreciate the project even more. I learned that when I was trying to understand how to get storage permissions for my app. The declarative nature made a lot of sense to me.</p>\n<h4>Things this app can do:</h4>\n<p>Everything a typical pdf viewer should do and more.</p>\n<h4>Things I wish it could do:</h4>\n<p>The things which would have made it a real good app were things like changing the phone sound profile or adjusting the brightness and display tone for the better reading experience, etc. Things like these are the bells and whistles of this project but it&#39;s still a good enough utility for someone looking for a very minimal and good looking pdf viewer.</p>\n<p>The app cannot share the pdfs with other apps and that&#39;s something I want to add very soon as well as better ways to sort all the files in the list. For now, it is sorted based on the last access by the user.</p>\n<p>I also am going to refactor the code and add comments for better understanding in the future (I suck at comments as of now; <strong>Update</strong>: I actually refactored the code and added comments, can’t believe myself, haha!).</p>\n<h4>Better flow with Github action:</h4>\n<p>With this project, I also tried Github actions for the first time and it wasn&#39;t as smooth of an experience. All of my work was being committed to the development branch of this project and I wanted to have the apk built and released using Github actions. So that&#39;s what I did and that&#39;s what has been happening for a while. I triggered it on the push to master which happens when dev is merged or something is pushed on the master branch. During this time I was all set to have the app on GitHub releases but found a simpler way to have the releases on Sourceforge. That&#39;s how I used Github actions for the first time with this project.</p>\n<hr>\n<h2>WHAT NOW!</h2>\n<p>This tiny little project was my first attempt with flutter and a few more things. There are missing features I would have loved to incorporate and I might do that in future.</p>\n<p>I have some more ideas to try with flutter and that&#39;s exciting to me. I want to build something that could stream real time audio from a host to multiple clients using socket connections or something similar, I will start to build that very soon, I am still very confused about trying to make it using flutter or try native app development this time. Some more ideas in the pipeline are a <strong>DRINK WATER</strong> alert app along with a browser extension, a multiplayer math game using flutter, and some more.</p>\n<p>If you have made it this far I would like to thank you for reading my very informal project entry and in case you want to collaborate with me on anything please feel free reach out, I would love to do that.</p>\n<p><em>Live long and keep building stuff. Peace out!</em></p>\n",
    "rawContent": "\n# dndr\n\n📦\n\n---\n\n> ### Content\n>\n> - WHY!\n> - HOW!\n> - WHAT NOW!\n\n## WHY!\n\nImagine two guys just talking about some tech/framework (very easy to imagine I'm sure) which is fascinating to them and just like anybody else gets too excited to a point where one of them describes an idea for a mini-project on the spot. The descriptions go along the lines of something he himself would want to use and haven't found anything just like that. He proposes that there should be a reader application that should have profiles or some preset settings (like notifications, color tone, brightness. etc.) which are enabled whenever he is in the app, the other guy follows... As they use more words they now have a concept which is what this project is about and the framework in the discussion is a noob-friendly, cross-platform mobile framework we have all heard of, **[flutter](https://flutter.dev)**. Flutter has become very popular and we wanted to try it out. The idea of writing code once and running it on multiple platforms is still very exciting to us and we wanted to give it a try. The guys forget about it the very next day but that's not the point for now. This was **why** this project was built. So let's quickly move on to **how** I built it using flutter and all of what I learned from this very first try at building a mobile application.\n\n---\n\n## HOW!\n\nFinally, the lockdown begins and I decide to come through with this project and write lines of [dart](https://dart.dev/) code. To be honest I was more excited about making this project with vim because I had only become more familiar with this editor. I had to **vim flex**, I am not sorry about it.\n\n#### Setup\n\n- Linux (latest kernel)\n- flutter (dev channel)\n- neovim with coc-flutter\n- Android Studio emulator\n- Github and Sourceforge\n\nI ran into numerous problems when Linux kernel v5.6 was released. Flutter hot-reload won't work or even **flutter run** won't work for some while. It was fixed soon but didn't reach the stable channel for long enough time therefore, had to make a switch to the dev channel in flutter.\n\nThe best thing about flutter is the availability of packages. The first package I had to use was a pdf viewer which I didn't want to write from scratch, then had to use a package for scrollbar and ended up using more packages than I would like. There's a package for even the tiniest of things with flutter.\n\n#### Packages used:\n\n- permission_handler: ^5.0.0+hotfix.6\n- flutter_full_pdf_viewer: ^1.0.6\n- path: ^1.7.0\n- draggable_scrollbar: ^0.0.4\n- flutter_launcher_icons: ^0.7.3\n- path_provider: ^1.6.11\n\nThe package's names are self-explanatory and it's a very simple app so nothing complex is happening in that department.\n\n#### Beginner’s Bad Luck:\n\nI would have loved a way to modularize/structure the code better and that's how I started in the beginning, turned out it became complex quickly, and then I ended up doing most of the things in a single file (since it’s a tiny app, **very tiny**) and minimum modules. The problem was some package classes were easier to instantiate and use without having a separate file for each. It makes the most sense because the packages in themselves are modules and need not be broken down any further.\n\nOne big note, flutter comes with dart so please keep it in mind before installing dart yourself separately, it will only waste disk space.\n\nI spent a little longer on the syntax and testing little things which cost more time in the beginning and weren't necessary. Also didn't plan on how to keep persistent data in the beginning and moved ahead to just make things work and hack around to find the best practices.\n\nI should have spent more time thinking about how I am going to implement persistent data storage on the device. I used basic file i/o operations to achieve that since I had to write a list. List isn’t that complex of a data structure but I would have liked it if I could have done it in a more efficient way. I tried finding a better way but failed. I have this feeling that there is a better way to do what I wanted to do and I ain't giving up looking for one anytime soon.\n\n#### Things which are beautiful about flutter/dart:\n\nI have read how people say dart is such a failed attempt at a coding language but I found it very easy to get started with. The syntax is very familiar to java or c++ and the standard library is rich which makes the development process much faster as well as more efficient. Flutter builds on top of dart and benefits from all of that. Even the memory management is top class with dart.\n\nAsync calls on dart worked for me without any hiccups and basically everything during the project had a positive impact on what I feel about mobile app development with flutter. There are a plethora of inbuilt classes for mostly all the purposes I needed.\n\nHow everything is so well integrated makes me appreciate the project even more. I learned that when I was trying to understand how to get storage permissions for my app. The declarative nature made a lot of sense to me.\n\n#### Things this app can do:\n\nEverything a typical pdf viewer should do and more.\n\n#### Things I wish it could do:\n\nThe things which would have made it a real good app were things like changing the phone sound profile or adjusting the brightness and display tone for the better reading experience, etc. Things like these are the bells and whistles of this project but it's still a good enough utility for someone looking for a very minimal and good looking pdf viewer.\n\nThe app cannot share the pdfs with other apps and that's something I want to add very soon as well as better ways to sort all the files in the list. For now, it is sorted based on the last access by the user.\n\nI also am going to refactor the code and add comments for better understanding in the future (I suck at comments as of now; **Update**: I actually refactored the code and added comments, can’t believe myself, haha!).\n\n#### Better flow with Github action:\n\nWith this project, I also tried Github actions for the first time and it wasn't as smooth of an experience. All of my work was being committed to the development branch of this project and I wanted to have the apk built and released using Github actions. So that's what I did and that's what has been happening for a while. I triggered it on the push to master which happens when dev is merged or something is pushed on the master branch. During this time I was all set to have the app on GitHub releases but found a simpler way to have the releases on Sourceforge. That's how I used Github actions for the first time with this project.\n\n---\n\n## WHAT NOW!\n\nThis tiny little project was my first attempt with flutter and a few more things. There are missing features I would have loved to incorporate and I might do that in future.\n\nI have some more ideas to try with flutter and that's exciting to me. I want to build something that could stream real time audio from a host to multiple clients using socket connections or something similar, I will start to build that very soon, I am still very confused about trying to make it using flutter or try native app development this time. Some more ideas in the pipeline are a **DRINK WATER** alert app along with a browser extension, a multiplayer math game using flutter, and some more.\n\nIf you have made it this far I would like to thank you for reading my very informal project entry and in case you want to collaborate with me on anything please feel free reach out, I would love to do that.\n\n_Live long and keep building stuff. Peace out!_\n"
  }
]